<%= form_with(model: @item) do |form| %>
<div id="item_form">
  <% if @item.errors.any? %>
    <div style="color: red">
      <h2><%= pluralize(@item.errors.count, "error") %> prohibited this item from being saved:</h2>
      <ul>
        <% @item.errors.each do |error| %>
          <li><%= error.full_message %></li>
        <% end %>
      </ul>
    </div>
  <% end %>

  
  <div class="mb-2">
    <%= form.label :name, I18n.t("items.form.all.name"), class: "form-label" %>
    <%= form.text_field :name, class: "form-control" %>
  </div>

  <div class="mb-2">
    <%= form.label :description, I18n.t("items.form.all.description"), class: "form-label" %>
    <%= form.text_field :description, class: "form-control" %>
  </div>

  <div class="mb-2">
    <%= form.label I18n.t("items.form.all.max_borrowing_days"), class: "form-label" %>
    <%= form.number_field :max_borrowing_days, min: 0, max: 365, class: "form-control" %>
  </div>

  <div class="mb-2">
    <%= form.label I18n.t("items.form.all.max_reservation_days"), class: "form-label" %>
    <%= form.number_field :max_reservation_days, min: 0, max: 365, class: "form-control"%>
  </div>
  
  <% if @item.book? %>
    <%= render "book_form", item: @item, form: form %>
  <% elsif @item.movie? %>
    <%= render "movie_form", item: @item, form: form %>
  <% elsif @item.game? %>
    <%= render "game_form", item: @item, form: form %>
  <% else @item.other? %>
    <%= render "other_form", item: @item, form: form %>
  <% end %>

  <h3 class="mt-3"><%= "Permissions" %></h3>

    <div class="container text-center mb-5">
      <div class="alert alert-warning" role="alert" v-if="duplicateEntries">
        TODO: Duplicate Entries
      </div>
      <div class="row mt-2" v-for="(permission, i) in permissions">
        <div class="col">
          <select :name="`permission_${i}_group_id`" class="form-select" required v-model="permission.groupId">
            <option :value="group.id" v-for="group in groups">{{group.name}}</option>
          </select>
        </div>
        <div class="col">
          <select :name="`permission_${i}_level`" class="form-select" required v-model="permission.permissionLevel">
            <option :value="level.level" v-for="level in levels">{{level.title}}</option>
          </select>
        </div>
        <div class="col-md-auto">
          <button class="btn btn-primary" type="button" @click="remove(i)">Remove</button>
        </div>
      </div>
      <div class="row mt-5">
        <button class="btn btn-outline-secondary btn-sm" type="button" @click="addPermission">Add</button>
      </div>

    </div>

    <div class="mt-3 row">
      <%= form.button (form.object.new_record? ? I18n.t("items.buttons.new") : I18n.t("items.buttons.update")), name: "item_type", value: "book", class: "mx-auto btn btn-primary" %>
    </div>
  </div>

</div>
<% end %>

<script>
    Vue.createApp({
        data() {
            return {
                itemId: <%= item.id.nil? ? 'null' : item.id %>,
                permissions: [],
                levels: [
                    {title: "Can Manage", level: "can_manage"},
                    {title: "Can Borrow", level: "can_borrow"},
                    {title: "Can View", level: "can_view"},
                ],
                groups: []
            }
        },
        created() {
            this.fetchGroups()
            if (this.itemId) {
                this.fetchExistingPermissions()
            }
        },
        methods: {
            fetchGroups() {
                fetch("/groups/all.json", {method: "GET"})
                    .then(response => response.json())
                    .then(data => {
                        this.groups = data
                    })
            },
            fetchExistingPermissions() {
                fetch(`/items/${this.itemId}/permissions.json`, {method: 'GET', redirect: 'follow'})
                    .then(response => response.json())
                    .then(data => {
                        this.permissions = data.map(permEntry => {
                            return {
                                groupId: permEntry.group_id,
                                permissionLevel: permEntry.permission_type
                            }
                        });
                    })
            },
            addPermission() {
                this.permissions.push({
                    groupId: "",
                    permissionLevel: null,
                })
            },
            remove(index) {
                this.permissions = this.permissions
                    .slice(0, index)
                    .concat(this.permissions.slice(index + 1))
            }
        },
        computed: {
            duplicateEntries() {
                return new Set(this.permissions.map(p => p.groupId)).size
                    !== this.permissions.length;
            }
        }
    }).mount('#item_form')
</script>
