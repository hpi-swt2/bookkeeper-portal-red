<div id="notification-centre"></div>

<script lang="js">
    const MSG_CUTOFF = 100;

    const Notification = {
        template: `
        <div class="card notification-message">
          <div class="card-body">
            <p class="card-title">
              <strong>{{ type }}</strong> - {{ date }}, {{ time }}
              <div class="pr-4">
                <button @click="remove" class="text-right position-absolute top-0 end-0 text-primary fs-4 btn btn-icon" :id="'delete-notification-button-' + id">
                  <i class="bi bi-x"></i>
                </button>
              </div>
            </p>
            <p>{{ message }}</p>
            <a class="card-link" @click="collapsed = !collapsed" v-if="expandable">
                {{ collapsed ? '<%= I18n.t("navbar.notifications.showMore") %>' : '<%= I18n.t("navbar.notifications.showLess") %>' }}
            </a>
          </div>
        </div>`,
        props: {
            notification: {
                id: Number,
                type: String,
                message: String,
                message_en: String,
                sent: String
            }
        },
        data: () => {
            return {
                collapsed: true
            }
        },
        methods: {
            remove() {
                fetch(`/notifications/${this.id}`, {method: 'DELETE', redirect: 'follow'})
                    .then(result => {
                        if (result.status >= 200 && result.status < 300) {
                            this.$emit("removed");
                        } else {
                            throw new Error(`Failed to delete Notification with id ${this.id}`);
                        }
                    })
                    .catch(error => console.log('error', error));
            }
        },
        computed: {
            id() {
                return this.notification.id
            },
            date() {
                let date = new Date(this.notification.sent);
                return `${date.getDay()}.${date.getMonth()}.${date.getFullYear()}`;
            },
            time() {
                let date = new Date(this.notification.sent);
                return `${date.getHours()}:${date.getMinutes()}`;
            },
            message() {
                if (this.collapsed) {
                    return this.shortMessage + (this.expandable ? "..." : "");
                }
                return this.localeMessage;
            },
            shortMessage() {
                return this.localeMessage.slice(0, MSG_CUTOFF);
            },
            localeMessage() {
                const params = new URLSearchParams(window.location.search);
                return params.get("locale") === "de" ? this.notification.message : this.notification.message_en;
            },
            expandable() {
                return this.shortMessage !== this.localeMessage;
            },
            type() {
                return "Reminder";
            }
        }
    }

    Vue.createApp({
        template: `
        <div class="row notification-inbox">
          <div class="mx-auto">
            <div id="notifications">
              <Notification
                  v-for="notification in notifications"
                  @removed="removeNotification(notification.id)"
                  :key="notification.id"
                  :notification="notification"
                  />
              <div v-if="notifications.length === 0">
                <p><%= I18n.t("navbar.notifications.emptyInbox") %></p>
              </div>
            </div>
          </div>
        </div>`,
        components: {
            Notification,
        },
        data() {
            return {
                notifications: ["TEST"]
            }
        },
        created() {
            this.retrieveNotifications()
        },
        methods: {
            removeNotification(notificationId) {
                this.notifications = this.notifications.filter(notification => {
                    return notification.id !== notificationId
                });
            },
            retrieveNotifications() {
                fetch(`/notifications/`, {method: 'GET', redirect: 'follow'})
                    .then(result => result.json())
                    .then(data => {
                        this.notifications = data;
                    })
                    .catch(error => {
                        this.notifications = ["TEST"]
                    });
            }
        }
    }).mount('#notification-centre')
</script>